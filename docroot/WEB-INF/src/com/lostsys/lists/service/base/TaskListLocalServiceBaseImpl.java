/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lostsys.lists.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.lostsys.lists.model.TaskList;
import com.lostsys.lists.service.TaskListLocalService;
import com.lostsys.lists.service.persistence.TaskItemCommentPersistence;
import com.lostsys.lists.service.persistence.TaskItemPersistence;
import com.lostsys.lists.service.persistence.TaskListPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the task list local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.lostsys.lists.service.impl.TaskListLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.lostsys.lists.service.impl.TaskListLocalServiceImpl
 * @see com.lostsys.lists.service.TaskListLocalServiceUtil
 * @generated
 */
public abstract class TaskListLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements TaskListLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.lostsys.lists.service.TaskListLocalServiceUtil} to access the task list local service.
	 */

	/**
	 * Adds the task list to the database. Also notifies the appropriate model listeners.
	 *
	 * @param taskList the task list
	 * @return the task list that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TaskList addTaskList(TaskList taskList) throws SystemException {
		taskList.setNew(true);

		return taskListPersistence.update(taskList);
	}

	/**
	 * Creates a new task list with the primary key. Does not add the task list to the database.
	 *
	 * @param id the primary key for the new task list
	 * @return the new task list
	 */
	@Override
	public TaskList createTaskList(long id) {
		return taskListPersistence.create(id);
	}

	/**
	 * Deletes the task list with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the task list
	 * @return the task list that was removed
	 * @throws PortalException if a task list with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TaskList deleteTaskList(long id)
		throws PortalException, SystemException {
		return taskListPersistence.remove(id);
	}

	/**
	 * Deletes the task list from the database. Also notifies the appropriate model listeners.
	 *
	 * @param taskList the task list
	 * @return the task list that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TaskList deleteTaskList(TaskList taskList) throws SystemException {
		return taskListPersistence.remove(taskList);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(TaskList.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return taskListPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.lostsys.lists.model.impl.TaskListModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return taskListPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.lostsys.lists.model.impl.TaskListModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return taskListPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return taskListPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return taskListPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public TaskList fetchTaskList(long id) throws SystemException {
		return taskListPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the task list with the primary key.
	 *
	 * @param id the primary key of the task list
	 * @return the task list
	 * @throws PortalException if a task list with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public TaskList getTaskList(long id)
		throws PortalException, SystemException {
		return taskListPersistence.findByPrimaryKey(id);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return taskListPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the task lists.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.lostsys.lists.model.impl.TaskListModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of task lists
	 * @param end the upper bound of the range of task lists (not inclusive)
	 * @return the range of task lists
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<TaskList> getTaskLists(int start, int end)
		throws SystemException {
		return taskListPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of task lists.
	 *
	 * @return the number of task lists
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getTaskListsCount() throws SystemException {
		return taskListPersistence.countAll();
	}

	/**
	 * Updates the task list in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param taskList the task list
	 * @return the task list that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TaskList updateTaskList(TaskList taskList) throws SystemException {
		return taskListPersistence.update(taskList);
	}

	/**
	 * Returns the task item local service.
	 *
	 * @return the task item local service
	 */
	public com.lostsys.lists.service.TaskItemLocalService getTaskItemLocalService() {
		return taskItemLocalService;
	}

	/**
	 * Sets the task item local service.
	 *
	 * @param taskItemLocalService the task item local service
	 */
	public void setTaskItemLocalService(
		com.lostsys.lists.service.TaskItemLocalService taskItemLocalService) {
		this.taskItemLocalService = taskItemLocalService;
	}

	/**
	 * Returns the task item persistence.
	 *
	 * @return the task item persistence
	 */
	public TaskItemPersistence getTaskItemPersistence() {
		return taskItemPersistence;
	}

	/**
	 * Sets the task item persistence.
	 *
	 * @param taskItemPersistence the task item persistence
	 */
	public void setTaskItemPersistence(TaskItemPersistence taskItemPersistence) {
		this.taskItemPersistence = taskItemPersistence;
	}

	/**
	 * Returns the task item comment local service.
	 *
	 * @return the task item comment local service
	 */
	public com.lostsys.lists.service.TaskItemCommentLocalService getTaskItemCommentLocalService() {
		return taskItemCommentLocalService;
	}

	/**
	 * Sets the task item comment local service.
	 *
	 * @param taskItemCommentLocalService the task item comment local service
	 */
	public void setTaskItemCommentLocalService(
		com.lostsys.lists.service.TaskItemCommentLocalService taskItemCommentLocalService) {
		this.taskItemCommentLocalService = taskItemCommentLocalService;
	}

	/**
	 * Returns the task item comment persistence.
	 *
	 * @return the task item comment persistence
	 */
	public TaskItemCommentPersistence getTaskItemCommentPersistence() {
		return taskItemCommentPersistence;
	}

	/**
	 * Sets the task item comment persistence.
	 *
	 * @param taskItemCommentPersistence the task item comment persistence
	 */
	public void setTaskItemCommentPersistence(
		TaskItemCommentPersistence taskItemCommentPersistence) {
		this.taskItemCommentPersistence = taskItemCommentPersistence;
	}

	/**
	 * Returns the task list local service.
	 *
	 * @return the task list local service
	 */
	public com.lostsys.lists.service.TaskListLocalService getTaskListLocalService() {
		return taskListLocalService;
	}

	/**
	 * Sets the task list local service.
	 *
	 * @param taskListLocalService the task list local service
	 */
	public void setTaskListLocalService(
		com.lostsys.lists.service.TaskListLocalService taskListLocalService) {
		this.taskListLocalService = taskListLocalService;
	}

	/**
	 * Returns the task list persistence.
	 *
	 * @return the task list persistence
	 */
	public TaskListPersistence getTaskListPersistence() {
		return taskListPersistence;
	}

	/**
	 * Sets the task list persistence.
	 *
	 * @param taskListPersistence the task list persistence
	 */
	public void setTaskListPersistence(TaskListPersistence taskListPersistence) {
		this.taskListPersistence = taskListPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.lostsys.lists.model.TaskList",
			taskListLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.lostsys.lists.model.TaskList");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return TaskList.class;
	}

	protected String getModelClassName() {
		return TaskList.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = taskListPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.lostsys.lists.service.TaskItemLocalService.class)
	protected com.lostsys.lists.service.TaskItemLocalService taskItemLocalService;
	@BeanReference(type = TaskItemPersistence.class)
	protected TaskItemPersistence taskItemPersistence;
	@BeanReference(type = com.lostsys.lists.service.TaskItemCommentLocalService.class)
	protected com.lostsys.lists.service.TaskItemCommentLocalService taskItemCommentLocalService;
	@BeanReference(type = TaskItemCommentPersistence.class)
	protected TaskItemCommentPersistence taskItemCommentPersistence;
	@BeanReference(type = com.lostsys.lists.service.TaskListLocalService.class)
	protected com.lostsys.lists.service.TaskListLocalService taskListLocalService;
	@BeanReference(type = TaskListPersistence.class)
	protected TaskListPersistence taskListPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private TaskListLocalServiceClpInvoker _clpInvoker = new TaskListLocalServiceClpInvoker();
}