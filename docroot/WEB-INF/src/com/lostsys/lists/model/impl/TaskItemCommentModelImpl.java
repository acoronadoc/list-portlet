/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lostsys.lists.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.lostsys.lists.model.TaskItemComment;
import com.lostsys.lists.model.TaskItemCommentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TaskItemComment service. Represents a row in the &quot;Lostsys_TaskItemComment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lostsys.lists.model.TaskItemCommentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TaskItemCommentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TaskItemCommentImpl
 * @see com.lostsys.lists.model.TaskItemComment
 * @see com.lostsys.lists.model.TaskItemCommentModel
 * @generated
 */
public class TaskItemCommentModelImpl extends BaseModelImpl<TaskItemComment>
	implements TaskItemCommentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a task item comment model instance should use the {@link com.lostsys.lists.model.TaskItemComment} interface instead.
	 */
	public static final String TABLE_NAME = "Lostsys_TaskItemComment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "item", Types.BIGINT },
			{ "userid", Types.BIGINT },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Lostsys_TaskItemComment (id_ LONG not null primary key,item LONG,userid LONG,description STRING null)";
	public static final String TABLE_SQL_DROP = "drop table Lostsys_TaskItemComment";
	public static final String ORDER_BY_JPQL = " ORDER BY taskItemComment.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Lostsys_TaskItemComment.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.lostsys.lists.model.TaskItemComment"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.lostsys.lists.model.TaskItemComment"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.lostsys.lists.model.TaskItemComment"));

	public TaskItemCommentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TaskItemComment.class;
	}

	@Override
	public String getModelClassName() {
		return TaskItemComment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("item", getItem());
		attributes.put("userid", getUserid());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long item = (Long)attributes.get("item");

		if (item != null) {
			setItem(item);
		}

		Long userid = (Long)attributes.get("userid");

		if (userid != null) {
			setUserid(userid);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getItem() {
		return _item;
	}

	@Override
	public void setItem(long item) {
		_item = item;
	}

	@Override
	public long getUserid() {
		return _userid;
	}

	@Override
	public void setUserid(long userid) {
		_userid = userid;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TaskItemComment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TaskItemComment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TaskItemComment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TaskItemCommentImpl taskItemCommentImpl = new TaskItemCommentImpl();

		taskItemCommentImpl.setId(getId());
		taskItemCommentImpl.setItem(getItem());
		taskItemCommentImpl.setUserid(getUserid());
		taskItemCommentImpl.setDescription(getDescription());

		taskItemCommentImpl.resetOriginalValues();

		return taskItemCommentImpl;
	}

	@Override
	public int compareTo(TaskItemComment taskItemComment) {
		long primaryKey = taskItemComment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TaskItemComment)) {
			return false;
		}

		TaskItemComment taskItemComment = (TaskItemComment)obj;

		long primaryKey = taskItemComment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TaskItemComment> toCacheModel() {
		TaskItemCommentCacheModel taskItemCommentCacheModel = new TaskItemCommentCacheModel();

		taskItemCommentCacheModel.id = getId();

		taskItemCommentCacheModel.item = getItem();

		taskItemCommentCacheModel.userid = getUserid();

		taskItemCommentCacheModel.description = getDescription();

		String description = taskItemCommentCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			taskItemCommentCacheModel.description = null;
		}

		return taskItemCommentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", item=");
		sb.append(getItem());
		sb.append(", userid=");
		sb.append(getUserid());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.lostsys.lists.model.TaskItemComment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>item</column-name><column-value><![CDATA[");
		sb.append(getItem());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userid</column-name><column-value><![CDATA[");
		sb.append(getUserid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TaskItemComment.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TaskItemComment.class
		};
	private long _id;
	private long _item;
	private long _userid;
	private String _description;
	private TaskItemComment _escapedModel;
}